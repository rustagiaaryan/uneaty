pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        AWS_CREDENTIALS = credentials('aws-credentials')
        DOCKER_USERNAME = "${env.DOCKER_HUB_CREDS_USR}"
        KUBERNETES_NAMESPACE = 'uneaty'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Backend Tests') {
            steps {
                dir('backend') {
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }
        
        stage('Frontend Tests') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm test -- --watchAll=false'
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                sh 'docker build -t ${DOCKER_USERNAME}/uneaty-backend:latest ./backend'
                sh 'docker build -t ${DOCKER_USERNAME}/uneaty-frontend:latest ./frontend'
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh 'echo $DOCKER_HUB_CREDS_PSW | docker login -u $DOCKER_USERNAME --password-stdin'
                sh 'docker push ${DOCKER_USERNAME}/uneaty-backend:latest'
                sh 'docker push ${DOCKER_USERNAME}/uneaty-frontend:latest'
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withAWS(credentials: 'aws-credentials', region: 'us-west-2') {
                    sh 'aws eks update-kubeconfig --name uneaty-cluster --region us-west-2'
                    
                    // Replace Docker username in deployment files
                    sh "sed -i 's|\${YOUR_DOCKER_USERNAME}|${DOCKER_USERNAME}|g' infrastructure/kubernetes/deployment.yaml"
                    
                    // Apply Kubernetes manifests
                    sh 'kubectl apply -f infrastructure/kubernetes/namespace.yaml'
                    sh 'kubectl apply -f infrastructure/kubernetes/deployment.yaml'
                    sh 'kubectl apply -f infrastructure/kubernetes/service.yaml'
                    sh 'kubectl apply -f infrastructure/kubernetes/ingress.yaml'
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images
            sh 'docker rmi ${DOCKER_USERNAME}/uneaty-backend:latest || true'
            sh 'docker rmi ${DOCKER_USERNAME}/uneaty-frontend:latest || true'
            
            // Clean up workspace
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}